<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Archiver\Zip;
use Drupal\Core\Archiver\ArchiverException;
use Symfony\Component\Yaml\Yaml;

$file_path = \Drupal::service('file_system')->realpath(\Drupal::service('module_handler')->getModule('dfg_3dviewer')->getPath()) . "/config/install/dfg_3dviewer.settings.yml";

if (file_exists($file_path)) {
    $config_data = Yaml::parseFile($file_path);

	define('MAIN_URL', $config_data['main_url'] ?? "https://3d-repository.hs-mainz.de");
	define('ENTITY_BUNDLE', $config_data['entity_bundle'] ?? "bd3d7baa74856d141bcff7b4193fa128");
	define('VIEWER_FILE_UPLOAD', $config_data['viewer_file_upload'] ?? "fbf95bddee5160d515b982b3fd2e05f7");
	define('VIEWER_FILE_NAME', $config_data['viewer_file_name'] ?? "faa602a0be629324806aef22892cdbe5");
	define('IMAGE_GENERATION', $config_data['image_generation'] ?? "f605dc6b727a1099b9e52b3ccbdf5673");
	define('FIELD_DF', $config_data['field_df'] ?? "field_df");

	\Drupal::messenger()->addMessage(serialize($config_data), 'status');
}
else {
	\Drupal::messenger()->addMessage("Cant load settings file", 'warning');
}

/**
 * Implements hook_help().
 */
function dfg_3dviewer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.wisski_iip_image':
      return '<p>' . t('This is the WissKI module for the integration ' .
        'of IIP (https://iipimage.sourceforge.io/).') . '</p>';
  }
}

function in_arrayi($needle, $haystack)
{
	return in_array(strtolower($needle), array_map('strtolower', $haystack));
}

function array_searchi($needle, $haystack)
{
	return array_search(strtolower($needle), array_map('strtolower', $haystack));
}

function url_exists ($url) {
	return str_contains(get_headers($url)[0], "200 OK");
}

function semi_automatic_path ($prefix, $filename, $filenameArchive, &$autoPath, $extension) {
	$allowedFormats = array('abc', 'obj', 'fbx', 'ply', 'dae', 'ifc', 'stl', 'xyz', 'pcd', 'json', '3ds', 'blend', 'zip', 'rar', 'xz', 'gz', 'gml');
	$SPATH=\Drupal::service('file_system')->realpath(\Drupal::service('module_handler')->getModule('dfg_3dviewer')->getPath());
	$SPATH = str_replace('/modules/dfg_3dviewer', '', $SPATH);
	$prefix = $SPATH . $prefix;
	$autoPath = '';
	if ($filenameArchive === '') $filenameArchive = $filename;
	if (in_arrayi($extension, $allowedFormats)) {
		if(!file_exists($prefix . "/gltf/" . $filename . ".glb")) {
			if(!file_exists($prefix . "/gltf/" . $filenameArchive . ".glb")) {
				foreach ($allowedFormats as $value) {
					$autoPath = $prefix . "/" . $filenameArchive . "." . $value;
					if(!file_exists($autoPath)) {
						$autoPath = '';
					}
					else {
						return;
					}
				}
			}
			else
			{
				$autoPath = $prefix . "/gltf/" . $filenameArchive . ".glb";
			}
		}
		else
		{
			$autoPath = $prefix . "/gltf/" . $filename . ".glb";
		}
		if ($autoPath === '') {
			foreach ($allowedFormats as $value) {
				$autoPath = $prefix . "/" . $filenameArchive . "." . $value;
				if(!file_exists($autoPath)) {
					$autoPath = '';
				}				
				else {
					return;
				}
			}
		}
	}
	else {
		$autoPath = $prefix . "/" . $filenameArchive . "." . $extension;
		if(!file_exists($autoPath)) {
			$autoPath = '';
		}
		else {
			return;
		}
	}
	if ($autoPath === '') {
		$autoPath = $prefix . "/" . $filenameArchive . "." . $extension;
		if(!file_exists($autoPath)) {
			$autoPath = '';
		}
		else {
			return;
		}
	}
}

/**
* Implements hook_file_validate().
 */
function dfg_3dviewer_hook_file_validate(Drupal\file\FileInterface $file) {
    $errors = [];
	$filename = $file->getFilename();
    if (!$filename) {
        $errors[] = t("The file's name is empty. Give a name to the file.");
    }
    if (strlen($filename) > 255) {
        $errors[] = t("The file's name exceeds the 255 characters limit. Rename the file and try again.");
    }
	if (preg_match('/\s/', $filename)) {
		$errors[] = t("Whitespaces are not allowed in filenames");
	}
    return $errors;
}

/**
* Implements hook_file_validate().
 */
function dfg_3dviewer_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
	$DEFAULT_CONFIG = \Drupal::config('dfg_3dviewer.settings');
	$SETTINGS = Array();
	$SETTINGS['entity_bundle']=constant("ENTITY_BUNDLE");
	$SETTINGS['viewer_file_upload']=constant("VIEWER_FILE_UPLOAD");
	$SETTINGS['image_generation']=constant("IMAGE_GENERATION");
	$SETTINGS['viewer_file_name']=constant("VIEWER_FILE_NAME");
	$SETTINGS['field_df']=constant("FIELD_DF");
	$SETTINGS['main_url']=constant("MAIN_URL");

	if (isset($DEFAULT_CONFIG)) {		
		$SETTINGS['entity_bundle']=$DEFAULT_CONFIG->get('dfg_3dviewer_entitybundle');
		$SETTINGS['viewer_file_upload']=$DEFAULT_CONFIG->get('dfg_3dviewer_viewer_file_upload');
		$SETTINGS['image_generation']=$DEFAULT_CONFIG->get('dfg_3dviewer_image_generation');
		$SETTINGS['viewer_file_name']=$DEFAULT_CONFIG->get('dfg_3dviewer_viewer_file_name');
		$SETTINGS['field_df']=$DEFAULT_CONFIG->get('dfg_3dviewer_field_df');
		$SETTINGS['main_url']=$DEFAULT_CONFIG->get('dfg_3dviewer_main_url');
	}
	$SPATH = \Drupal::service('file_system')->realpath(\Drupal::service('module_handler')->getModule('dfg_3dviewer')->getPath());
	$XPATH = dirname(dirname($SPATH));
	$archives = array("zip", "rar", "tar", "xz", "gz");
	$base = \Drupal::request()->getSchemeAndHttpHost();
	$output = null;
	$retval = null;
	$autoPath = '';
	if ($entity->bundle() == "file") {
		$file = $entity->toArray();
		$realpath = \Drupal::service('file_system')->realpath($file['uri'][0]['value']);
		$parts = pathinfo($realpath);

		$extension = strtoupper($parts['extension']);
		$newFile = $parts['dirname'] . "/gltf/" . $parts['filename'] . ".glb";
		$newDir = $parts['dirname'] . "/" . $parts['filename'] . "_" . $extension . "/gltf/";
		$isArchive = false;
		if (!file_exists($newFile) && !is_dir($newDir) && !file_exists($newFile."off")) {
			if (!in_arrayi($extension, $archives)) {
				$output = exec ($SPATH . '/scripts/convert.sh -c true -l 3 -b true -i "' . "$realpath" . '" -f true 2>&1', $output, $retval);
			}
			elseif (in_arrayi($extension, $archives)) {
				try {
					$isArchive = true;
					$extractPath = $parts['dirname'] . "/" . $parts['filename'] . "_" . $extension . "/";
					if ($extension == 'ZIP') {
						$zip = new Zip($realpath);
						$zip->extract($extractPath);
						$zip->remove($realpath);
						$archiveFiles = scandir ($extractPath);
						foreach ($archiveFiles as $zipFile) {
							$partsZip = pathinfo($zipFile);					
							switch (strtolower($partsZip["extension"])) {
								case "obj":
								case "fbx":
								case "ply":
								case "dae":
								case "abc":
								case "blend":
								case "stl":
								case "wrl":
								case "x3d":
								case "ifc":
								case "glb":
								case "gltf":
								case "gml":
									exec ($SPATH . '/scripts/convert.sh -c true -l 3 -b true -i "' . $extractPath . $zipFile . '" -o "' . $extractPath . '" -f true -a false', $output, $retval);										
								break;
							}
						}
					}
					elseif ($extension == 'RAR') {
						$output = shell_exec($SPATH . '/scripts/uncompress.sh -t rar -i "' . $realpath . '" -o "' . $extractPath . '" -n "' . $parts['filename'] . '"');
					}
					elseif ($extension == 'TAR' || $extension == 'GZ' ) {
						$output = shell_exec($SPATH . '/scripts/uncompress.sh -t tar -i "' . $realpath . '" -o "' . $extractPath . '" -n "' . $parts['filename'] . '"');
					}
					elseif ($extension == 'XZ') {
						$output = shell_exec($SPATH . '/scripts/uncompress.sh -t xz -i "' . $realpath . '" -o "' . $extractPath . '" -n "' . $parts['filename'] . '"');
					}
				}
				catch (ArchiverException $exception) {
					\Drupal::messenger()->addMessage("Exception while handling archive: " . serialize($exception), 'status');
				}
			}
			else {
				\Drupal::messenger()->addMessage($extension . " is not supported yet", 'warning');
			}
			#semi-automatic path change
			$entity->set($SETTINGS['viewer_file_name'], $autoPath);
			#for debugging only
			if ($retval === null) {
				\Drupal::messenger()->addMessage($output, 'status');
			}
			else if ($retval === 1) {
				\Drupal::messenger()->addMessage($output, 'warning');
			}
			else if ($retval === 2) {
				\Drupal::messenger()->addMessage($output, 'error');
			}
			#for debugging only
		}
	}
	if($entity->bundle() == $SETTINGS['entity_bundle']) {
		//$file_info = $entity->label->getValue();
		$file_info = $entity->{$SETTINGS['viewer_file_upload']}->getValue();
		$file_id = $file_info[0]["target_id"];
		$entity_id = $entity->eid->value;
		$file = \Drupal\file\Entity\File::load($file_id);
		$imgSuffix = "_side45.png";
		clearstatcache();
		if (!is_null($file)) {
			$fileName = $file->getFilename();
			$extension = pathinfo($fileName, PATHINFO_EXTENSION);
			$fileBase = str_replace(".$extension", "", $fileName);
			$isArchive = false;
			if (in_arrayi($extension, $archives)) {
				$isArchive = true;
			}
			$file_url = \Drupal::service('file_url_generator')->generate($file->getFileUri());
			$viewBase = "";
			$path = "";
			#is archive
			if (in_arrayi($extension, $archives)) {
				$path = str_replace($fileName, "", $file_url->toString());
				$subPath = substr($path, 0, strrpos( $path, '/') );
				$viewBase = $base . $subPath . "/" . $fileBase . "_" . strtoupper($extension) . "/views/" . $fileBase;
				$fileBaseArchive = preg_replace('/_[0-9]+$/', '', $fileBase, 1);
				if (!url_exists($viewBase . $imgSuffix)) {
					$subPath = substr($path, 0, strrpos( $path, '/') );
					$viewBase = $base . $subPath . "/" . $fileBase . "_" . strtoupper($extension) . "/views/" . $fileBaseArchive;
				}
			}
			else
			{
				$path = str_replace($fileName, "views/" . $fileName, $file_url->toString());
				$viewBase = $base . $path;
				if (!url_exists($viewBase . $imgSuffix)) {
					$subPath = substr($path, 0, strrpos( $path, '/') );
					$viewBase = $base . $subPath . "/" . $fileBase;
					if (!url_exists($viewBase . $imgSuffix)) {
						$viewBase = $base . $subPath . "/views/" . $fileBase;
					}
				}
			}

			$viewBase = str_replace(' ', '%20', $viewBase);
			clearstatcache();
			$imagesTemp = array($viewBase . $imgSuffix, $viewBase . "_side0.png", $viewBase . "_side90.png", $viewBase . "_side135.png", $viewBase . "_side180.png", $viewBase . "_side225.png", $viewBase . "_side270.png", $viewBase . "_side315.png", $viewBase . "_top.png");
			$imagesPaths = [];
			foreach ($imagesTemp as $value) {
				if (url_exists($value) && getimagesize($value) !== false) {
					array_push($imagesPaths, $value);
				}
			}
			if (count($imagesPaths) > 0) {
				\Drupal::messenger()->addMessage("Renderings were added to the entity");
				$entity->set($SETTINGS['image_generation'], $imagesPaths);
			}
			$fpath = $file_url->toString();
			$fpath = str_replace($fileName, "", $fpath);
			$subPath = substr($fpath, 0, strrpos( $fpath, '/') );
			$fileBaseArchive = preg_replace('/_[0-9]+$/', '', $fileBase, 1);
			if (in_arrayi($extension, $archives)) {
				semi_automatic_path ($subPath . '/' . $fileBase . "_" . strtoupper($extension), $fileBase, $fileBaseArchive, $autoPath, $extension);
			}
			else {
				semi_automatic_path ($subPath, $fileBase, '', $autoPath, $extension);
			}
			$origPath = $subPath . "/gltf/" . $fileBase . ".glb";
			$origArchPath = $subPath . '/' . $fileBase . "_" . strtoupper($extension) . "/gltf/" . $fileBase . ".glb";
			if ($autoPath != "" && ((!$isArchive && strcmp($origPath, $autoPath) !== 0) || ($isArchive && strcmp($origArchPath, $autoPath) !== 0))) {
			//	\Drupal::messenger()->addMessage("GLTF or file with given name (possible archive/filename mismatch) representation not found, semi-automatic path applied\n", 'warning');
			}
			elseif ($autoPath)
			{
				//Check last time if it really exists
				if ($isArchive) {
					if (file_exists($origArchPath)) {
						$autoPath = $origArchPath;
					}
					else {
						$autoPath = $origPath;
					}
				}
				else {
					$autoPath = $origPath;
				}
			}
			$autoPath = str_replace($XPATH, $SETTINGS['main_url'], $autoPath);
			//\Drupal::messenger()->addMessage($fileBase, 'status');
			$entity->set($SETTINGS['viewer_file_name'], $autoPath);
		}
		require ('php/build_xml.php');
		build_xml ($entity_id, $SETTINGS['main_url']);
		$no_cache=false;
		$caching = $no_cache ? '?no_cache=1' : ''; //temporary workaround
		$xml_struc = 'public://xml_structure/' . $entity_id . '.xml' . $caching;
		$xml_wrapper = \Drupal::service('stream_wrapper_manager')->getViaUri($xml_struc);
		$xml_uri = $xml_wrapper->getExternalURL();
		//global $base_url;
		$uri = $SETTINGS['main_url'] . "/viewer?tx_dlf[id]=" . $xml_uri . "&no_cache=1&modelviewer=1";
		$entity->set($SETTINGS['field_df'], $uri);
	}
	//\Drupal::messenger()->addMessage(serialize($entity), 'status');
}
